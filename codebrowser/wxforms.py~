#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Sat Dec  1 07:33:35 2012

import operator
import wx
from readcodes.models import ReadCode,Term
from django.utils.datastructures import SortedDict
from django.db.models import Q

# begin wxGlade: extracode
# end wxGlade

def flatten(l):
  out = []
  for item in l:
    if isinstance(item, (list, tuple)):
      out.extend(flatten(item))
    else:
      out.append(item)
  return out

def PopulateTree(tree,item,codes):
    tree.DeleteChildren(item)
    if codes:
        for x in codes:
            new_item = tree.AppendItem(item,unicode(x))
            tree.SetItemPyData(new_item,x)
            tree.SetItemHasChildren(new_item)
    else:
        tree.SetItemHasChildren(item,False)
            

class PriorityBrowser(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PriorityBrowser.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER | wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_2 = wx.StaticText(self, -1, "Read Code:      ")
        self.button_1 = wx.Button(self, -1, "Select")
        self.label_3 = wx.StaticText(self, -1, "Priority: ", style=wx.ALIGN_RIGHT)
        self.priority = wx.SpinCtrl(self, -1, "10", min=0, max=100)
        self.button_3 = wx.Button(self, wx.ID_OK, "")
        self.button_4 = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.GetReadCode, self.button_1)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: PriorityBrowser.__set_properties
        self.SetTitle("dialog_2")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PriorityBrowser.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.label_2, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_2.Add(self.button_1, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_3.Add(self.label_3, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_3.Add(self.priority, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_11.Add(self.button_3, 0, wx.ALL | wx.ALIGN_RIGHT | wx.ALIGN_BOTTOM, 3)
        sizer_11.Add(self.button_4, 0, wx.ALL | wx.ALIGN_RIGHT | wx.ALIGN_BOTTOM, 3)
        sizer_1.Add(sizer_11, 1, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def GetReadCode(self, event):  # wxGlade: PriorityBrowser.<event_handler>
        dlg = ReadCodeBrowser(self,preferred_codes = [])
        if dlg.ShowModal()==wx.ID_OK:
            self.code = dlg.active_code
            self.label_2.SetLabel("Read Code: %s" % unicode(self.code))

# end of class PriorityBrowser
class ReadCodeBrowser(wx.Dialog):
    def __init__(self, *args, **kwds):
        self.preferred_codes = kwds.pop('preferred_codes', None)
        # begin wxGlade: ReadCodeBrowser.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER | wx.MAXIMIZE_BOX | wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.search_text = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER)
        self.search_button = wx.Button(self, wx.ID_FIND, "")
        self.search_results = wx.ListBox(self, -1, choices=[], style=wx.LB_SINGLE)
        self.sizer_10_staticbox = wx.StaticBox(self, -1, "Search Results")
        self.selected_code = wx.StaticText(self, -1, "Selected code:")
        self.children_tree = wx.TreeCtrl(self, -1, style=wx.TR_HAS_BUTTONS | wx.TR_NO_LINES | wx.TR_HIDE_ROOT | wx.TR_HAS_VARIABLE_ROW_HEIGHT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.sizer_7_staticbox = wx.StaticBox(self, -1, "Children")
        self.parents_tree = wx.TreeCtrl(self, -1, style=wx.TR_HAS_BUTTONS | wx.TR_NO_LINES | wx.TR_HIDE_ROOT | wx.TR_HAS_VARIABLE_ROW_HEIGHT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.sizer_8_staticbox = wx.StaticBox(self, -1, "Parents")
        self.ok_button = wx.Button(self, wx.ID_OK, "")
        self.button_2 = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT_ENTER, self.SearchCode, self.search_text)
        self.Bind(wx.EVT_BUTTON, self.SearchCode, self.search_button)
        self.Bind(wx.EVT_LISTBOX_DCLICK, self.ConfirmListCode, self.search_results)
        self.Bind(wx.EVT_LISTBOX, self.SelectListCode, self.search_results)
        self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.SelectTreeCode, self.children_tree)
        self.Bind(wx.EVT_TREE_ITEM_EXPANDED, self.ExpandChild, self.children_tree)
        self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.SelectTreeCode, self.parents_tree)
        self.Bind(wx.EVT_TREE_ITEM_EXPANDED, self.ExpandParent, self.parents_tree)
        # end wxGlade
        self.children_tree.AddRoot("")
        self.parents_tree.AddRoot("")
        for k,v in self.preferred_codes:
            if v:
                item  = self.search_results.Append(k)
                #self.search_results.SetItemFont(item,font)
                for f in v:
                    self.search_results.Append(u'    '+unicode(f),f)

    def __set_properties(self):
        # begin wxGlade: ReadCodeBrowser.__set_properties
        self.SetTitle("Read Code Browser")
        self.SetSize((683, 383))
        self.ok_button.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ReadCodeBrowser.__do_layout
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_8_staticbox.Lower()
        sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.HORIZONTAL)
        self.sizer_7_staticbox.Lower()
        sizer_7 = wx.StaticBoxSizer(self.sizer_7_staticbox, wx.HORIZONTAL)
        self.sizer_10_staticbox.Lower()
        sizer_10 = wx.StaticBoxSizer(self.sizer_10_staticbox, wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        label_1 = wx.StaticText(self, -1, "Search")
        sizer_5.Add(label_1, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 3)
        sizer_5.Add(self.search_text, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 3)
        sizer_5.Add(self.search_button, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL | wx.ADJUST_MINSIZE, 3)
        sizer_4.Add(sizer_5, 0, wx.EXPAND, 0)
        sizer_10.Add(self.search_results, 1, wx.EXPAND | wx.ADJUST_MINSIZE, 0)
        sizer_4.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_4.Add(self.selected_code, 0, wx.ALL | wx.ADJUST_MINSIZE, 3)
        sizer_7.Add(self.children_tree, 1, wx.EXPAND, 0)
        sizer_6.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_8.Add(self.parents_tree, 1, wx.EXPAND, 0)
        sizer_6.Add(sizer_8, 1, wx.EXPAND, 0)
        sizer_4.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_9.Add(self.ok_button, 0, wx.ADJUST_MINSIZE, 0)
        sizer_9.Add(self.button_2, 0, wx.ADJUST_MINSIZE, 0)
        sizer_4.Add(sizer_9, 0, wx.ALIGN_RIGHT, 0)
        self.SetSizer(sizer_4)
        self.Layout()
        self.Centre()
        # end wxGlade
        

    def SelectCode(self, code):  # wxGlade: ReadCodeBrowser.<event_handler>
        self.active_code = code
        self.ok_button.Enable(True)
        synonyms = code.get_extra_synonyms()
        if synonyms:
            self.selected_code.SetLabel('Selected code: %s (%s)' % (unicode(code),",".join([unicode(x) for x in synonyms])))
        else:
            self.selected_code.SetLabel('Selected code: %s' % unicode(code))
        parents = ReadCode.objects.filter(children__read_code=code)
        PopulateTree(self.parents_tree,self.parents_tree.GetRootItem(),parents)
        children = ReadCode.objects.filter(parents__parent_read_code=code).order_by('parents__list_order')
        PopulateTree(self.children_tree,self.children_tree.GetRootItem(),children)
        self.Refresh()
        
    def ExpandChild(self, event):  # wxGlade: ReadCodeBrowser.<event_handler>
        item = event.GetItem()
        children = ReadCode.objects.filter(parents__parent_read_code=self.children_tree.GetItemPyData(item)).order_by('parents__list_order')
        PopulateTree(self.children_tree,event.GetItem(),children)

    def ExpandParent(self, event):  # wxGlade: ReadCodeBrowser.<event_handler>
        item = event.GetItem()
        parents = ReadCode.objects.filter(children__read_code=self.parents_tree.GetItemPyData(item))
        PopulateTree(self.parents_tree,item,parents)

    def SearchCode(self, event):  # wxGlade: ReadCodeBrowser.<event_handler>
        search_results_header = 'All other codes found...'
        text = self.search_text.GetValue()
        search_codes_list = []
        exclude_old_codes = Q(concept_status='C')
        #first see if is a read code itself...
        if len(text) <= 5:
            read_search = text + (5-len(text))*'.'
            search_codes_list = list(ReadCode.objects.filter(code=read_search))
        if len(search_codes_list)==0:
            #next look for direct matches on whole phrase
            #get all matching codes
            search_codes_list = list(ReadCode.objects.filter(synonyms__term_30__icontains=text
                                                    ).filter(exclude_old_codes
                                                    ).distinct(
                                                    ).order_by('storedhierarchy__priority'))
        if len(search_codes_list)==0:
            #now look for matches on all items of phrase (but not necessarily together)
            filter_array = [Q(synonyms__term_30__icontains=x) for x in text.split()]
            search_codes_list = list(ReadCode.objects.filter(reduce(operator.and_,filter_array)
                                                    ).filter(exclude_old_codes
                                                    ).distinct(
                                                    ).order_by('storedhierarchy__priority'))
        if len(search_codes_list)==0:
            #now look for matches on all items of phrase (including obsolete and redundant codes)
            search_codes_list = list(ReadCode.objects.filter(reduce(operator.and_,filter_array)
                                                    ).distinct(
                                                    ).order_by('storedhierarchy__priority'))
        if len(search_codes_list)==0:
            search_results_header = "No exact match found - nearest results"
            #now look for matches on any item of phrase - getting desperate now
            search_codes_list = list(ReadCode.objects.filter(reduce(operator.or_,filter_array)
                                                    ).filter(exclude_old_codes
                                                    ).distinct(
                                                    ).order_by('storedhierarchy__priority'))
        if len(search_codes_list)==0:
            #finally look for matches on any item of phrase, including obsolete codes
            search_codes_list = list(ReadCode.objects.filter(reduce(operator.or_,filter_array)
                                                    ).distinct(
                                                    ).order_by('storedhierarchy__priority'))
        if len(search_codes_list)==0:
            #giving up now.
            self.search_results.Append('No matching codes found',None)
            return
        code_id_list = set([x.code for x in search_codes_list])
        final_codes = SortedDict()
        for (k,v) in self.preferred_codes:
            final_codes[k] = []
        final_codes[search_results_header] = []
        font = self.search_results.GetFont()
        font.SetWeight(wx.FONTWEIGHT_BOLD)
        found_codes = {}
        for k,j in self.preferred_codes:
            found_codes[k] = set()
        for c in search_codes_list:
            #first look in the preferred codes, and add it to that 
            for (k,v) in self.preferred_codes:
                #find unique matching codes for each set of preferred codes
                for i in v:
                    if i.code in c.storedhierarchy.ancestor_codes:
                        found_codes[k].add(i)
                #now add them
            #now look to see if it has any parents in the rest of the codes
            parents = set(c.storedhierarchy.ancestor_codes.split(','))
            parents.discard(c.code)
            #check intersection of ancestors and other codes
            if parents & code_id_list:
                #this code has a matching parent - do not include
                continue
            else:
                final_codes[search_results_header].append(c)
        for k in found_codes:
            for i in found_codes[k]:
                final_codes[k].append(i)
                
        
        self.search_results.Clear()
        for (k,v) in final_codes.items():
            if final_codes[k]:
                item  = self.search_results.Append(k)
                self.search_results.SetItemFont(item,font)
                for f in final_codes[k]:
                    self.search_results.Append(u'    '+unicode(f),f)

    def SelectListCode(self, event):  # wxGlade: ReadCodeBrowser.<event_handler>
        self.SelectCode(event.GetClientData())      
        
    def SelectTreeCode(self, event):  # wxGlade: ReadCodeBrowser.<event_handler>
        self.SelectCode(event.GetEventObject().GetItemPyData(event.GetItem()))
        
    def GetReadCode(self):
        if self.ShowModal()==wx.ID_OK:
            return self.active_code
        else:
            return None

       
    def ConfirmListCode(self, event):  # wxGlade: ReadCodeBrowser.<event_handler>
        self.ConfirmCode(event.GetClientData())      

    def ConfirmCode(self,code):
        self.active_code = code
        self.EndModal(wx.ID_OK)

    def ConfirmTreeCode(self, event):  # wxGlade: ReadCodeBrowser.<event_handler>
        self.ConfirmCode(event.GetEventObject().GetItemPyData(event.GetItem()))

# end of class ReadCodeBrowser

