#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Wed Nov 21 19:18:03 2012

import wx
from problems.models import Note,Problem
from readcodes.models import ReadCode,Term
from codebrowser.wxforms import ReadCodeBrowser,PriorityBrowser
from codebrowser.models import BrowsePriority
import wxforms.gui
import mptt.utils
from django.shortcuts import render_to_response

# begin wxGlade: extracode
# end wxGlade



class ProblemSelector(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ProblemSelector.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER | wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.code_label = wx.StaticText(self, -1, "Read Code:", style=wx.ALIGN_RIGHT | wx.ST_NO_AUTORESIZE)
        self.button_1 = wx.Button(self, -1, "Pick Read Code")
        self.severity = wx.Choice(self, -1, choices=[])
        self.activity = wx.Choice(self, -1, choices=[])
        self.expiry = wx.DatePickerCtrl(self, -1, style=wx.DP_DROPDOWN | wx.DP_ALLOWNONE)
        self.static_line_1 = wx.StaticLine(self, -1)
        self.button_2 = wx.Button(self, wx.ID_OK, "")
        self.button_3 = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.PickCode, self.button_1)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ProblemSelector.__set_properties
        self.SetTitle("New Problem")
        self.activity.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Ubuntu"))
        # end wxGlade
        self.severity.AppendItems([x[1] for x in Problem.SEVERITY_CHOICES])
        self.activity.AppendItems([x[1] for x in Problem.ACTIVITY_CHOICES])
        
    def __do_layout(self):
        # begin wxGlade: ProblemSelector.__do_layout
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(4, 2, 0, 0)
        grid_sizer_1.Add(self.code_label, 0, wx.ALL | wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 12)
        grid_sizer_1.Add(self.button_1, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 3)
        label_1 = wx.StaticText(self, -1, "Severity", style=wx.ALIGN_RIGHT)
        grid_sizer_1.Add(label_1, 0, wx.ALL | wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.severity, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 3)
        label_2 = wx.StaticText(self, -1, "Current?", style=wx.ALIGN_RIGHT)
        grid_sizer_1.Add(label_2, 0, wx.ALL | wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.activity, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 3)
        label_3 = wx.StaticText(self, -1, "Expires")
        grid_sizer_1.Add(label_3, 0, wx.ALL | wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.expiry, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_4.Add(grid_sizer_1, 1, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4.Add(self.static_line_1, 0, wx.EXPAND, 0)
        sizer_5.Add(self.button_2, 0, wx.ALL, 3)
        sizer_5.Add(self.button_3, 0, wx.ALL, 3)
        sizer_4.Add(sizer_5, 0, wx.ALIGN_RIGHT, 0)
        self.SetSizer(sizer_4)
        sizer_4.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    def PickCode(self, event):  # wxGlade: ProblemSelector.<event_handler>
        dlg = ReadCodeBrowser(self,preferred_codes = [('Problem Headers',[x.name for x in Problem.objects.all()])])
        self.active_code = dlg.GetReadCode()
        if self.active_code:
            self.code_label.SetLabel('Read Code: %s' % unicode(self.active_code))
            self.Fit()


# end of class ProblemSelector
class NotesList(wx.HtmlListBox):
    def __init__(self,parent,window_id,problems=None):
        wx.HtmlListBox.__init__(self,parent,window_id,style=wx.LB_EXTENDED)
        self.SetProblems(problems)
        
    def SetProblems(self,problems):
        self.problems = problems
        self.Reload()
        
    def Reload(self):
        if self.problems:
            self.notes = Note.objects.filter(problem__in=self.problems).order_by('date')
        else:
            self.notes = Note.objects.all().order_by('date')
        self.SetItemCount(len(self.notes))
        self.Refresh()
        
    def OnGetItem(self,n):
        if n<len(self.notes):
            response = render_to_response('notes_entry.html',{'note':self.notes[n]})
            return response.content
        else:
            return ''
        
    def GetSelectedNotes(self):
        return [self.notes[self.GetSelection()]]
        note_list = []
        item, cookie = self.GetFirstSelected()
        while item != wx.NOT_FOUND:
            note_list.append(self.notes[item])
            item, cookie = self.GetNextSelected(cookie)
        return note_list
        
class ProblemFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ProblemFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, -1, style=wx.SP_3D | wx.SP_BORDER)
        self.window_1_pane_1 = wx.Panel(self.window_1, -1)
        self.tree = wx.TreeCtrl(self.window_1_pane_1, -1, style=wx.TR_HAS_BUTTONS | wx.TR_NO_LINES | wx.TR_HIDE_ROOT | wx.TR_EXTENDED | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.window_1_pane_2 = wx.ScrolledWindow(self.window_1, -1, style=wx.TAB_TRAVERSAL)
        self.notes = NotesList(self.window_1_pane_2, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TREE_BEGIN_DRAG, self.BeginDrag, self.tree)
        self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.ItemActivated, self.tree)
        self.Bind(wx.EVT_TREE_END_DRAG, self.EndDrag, self.tree)
        # end wxGlade
        ID_MOVE_PROB = wx.NewId()
        ID_RELEGATE_PROB = wx.NewId()
         
        self.Bind(wx.EVT_MENU, self.onExit, id=wx.ID_EXIT)
        self.Bind(wx.EVT_MENU, self.onAbout, id=wx.ID_ABOUT)
        self.problem_popup_menu = wx.Menu()
        self.problem_popup_menu.Append(ID_MOVE_PROB,"Move")
        self.problem_popup_menu.Append(ID_RELEGATE_PROB,"Relegate")

        self.Bind(wx.EVT_MENU, self.onProblemMove, id = ID_MOVE_PROB)
        self.Bind(wx.EVT_MENU, self.onProblemRelegate, id = ID_RELEGATE_PROB)
        root = self.tree.AddRoot("Problems")
        self.tree_roots = {}
        sub_roots = []
        for i,j in Problem.ACTIVITY_CHOICES:
            sub_root = self.tree.AppendItem(parent = root,text = j)
            sub_roots.append(sub_root)
            for k,l in Problem.SEVERITY_CHOICES:
                self.tree_roots[i+k] = self.tree.AppendItem(parent = sub_root,text = l) 
                self.tree.SetItemPyData(self.tree_roots[i+k],(i,k))
        for i in sub_roots:
            self.tree.Expand(i)
        self.window_1.SetSashPosition(300)
        self.Reload()

    def __set_properties(self):
        # begin wxGlade: ProblemFrame.__set_properties
        self.SetTitle("Problem Demo")
        self.SetSize((1000, 600))
        self.window_1_pane_2.SetScrollRate(10, 10)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ProblemFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.tree, 1, wx.EXPAND, 0)
        self.window_1_pane_1.SetSizer(sizer_2)
        sizer_3.Add(self.notes, 1, wx.EXPAND, 0)
        self.window_1_pane_2.SetSizer(sizer_3)
        self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.SetSize((1000, 600))
        # end wxGlade

    def BeginDrag(self, event):  # wxGlade: ProblemFrame.<event_handler>
        self.drag_origin = self.tree.GetItemPyData(event.GetItem())
        if isinstance(self.drag_origin,Problem):
            event.Allow()
 
    def ItemActivated(self, event):  # wxGlade: ProblemFrame.<event_handler>
        problem = self.tree.GetItemPyData(event.GetItem())
        self.notes.SetProblems(problem.get_descendants(include_self=True))

    def EndDrag(self, event):  # wxGlade: ProblemFrame.<event_handler>
        self.drag_dest = self.tree.GetItemPyData(event.GetItem())
        #move popupmenu slightly so first item is selected by default
        self.PopupMenuXY(self.problem_popup_menu,event.GetPoint().x-20,event.GetPoint().y-10)
                
    def onExit(self, event):  # wxGlade: ProblemMenu.<event_handler>
        self.Close()

    def onAbout(self, event):  # wxGlade: ProblemMenu.<event_handler>
        print "Event handler `onAbout' not implemented"
        event.Skip()

    def onProblemMove(self,event):
        if isinstance(self.drag_dest,Problem):
            try:
                self.drag_origin.move_to(self.drag_dest)
                self.Reload()
            except mptt.exceptions.InvalidMove:
                #don't do anything if invalid move
                pass
        elif isinstance(self.drag_dest,tuple):
            self.drag_origin.move_to(None)
            self.drag_origin.activity = self.drag_dest[0]
            self.drag_origin.severity = self.drag_dest[1]
            self.drag_origin.save()
            self.Reload()
            
    def onProblemRelegate(self,event):
        if isinstance(self.drag_dest,Problem):
            Note.objects.filter(problem=self.drag_origin).update(problem=self.drag_dest)
            #move all of the source's childen to be children of the destination node
            for f in self.drag_origin.get_children():
                try:
                    f.move_to(self.drag_dest)
                except mptt.exceptions.InvalidMove:
                    #don't do anything if invalid move
                    pass
            #delete source node
            self.drag_origin.delete()
            self.Reload()

    def Reload(self):
        # first delete all the items, then add back in again
        for i in self.tree_roots.values():
            self.tree.DeleteChildren(i)
        #for each root node add it, and all it's children to the appropriate root.
        for p in Problem.objects.root_nodes():
            last_item = self.tree.AppendItem(parent = self.tree_roots[p.activity+p.severity],text = unicode(p))
            self.tree.SetItemPyData(last_item,p)
            ancestry = []
            for q,info in mptt.utils.tree_item_iterator(p.get_descendants(include_self=False)):
                if info['new_level']:
                    ancestry.append(last_item)
                last_item = self.tree.AppendItem(parent = ancestry[-1],text = unicode(q))
                self.tree.SetItemPyData(last_item,q)
                for f in info['closed_levels']:
                    ancestry.pop()
        for i in self.tree_roots.values():
            self.tree.Expand(i)

# end of class ProblemFrame

class ProblemMenu(wx.MenuBar):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ProblemMenu.__init__
        wx.MenuBar.__init__(self, *args, **kwds)
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_EXIT, "E&xit", "", wx.ITEM_NORMAL)
        self.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_ABOUT, "About", "", wx.ITEM_NORMAL)
        self.Append(wxglade_tmp_menu, "Help")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.onExit, id=wx.ID_EXIT)
        self.Bind(wx.EVT_MENU, self.onAbout, id=wx.ID_ABOUT)
        # end wxGlade
  

    def __set_properties(self):
        # begin wxGlade: ProblemMenu.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ProblemMenu.__do_layout
        pass
        # end wxGlade

    def onExit(self, event):  # wxGlade: ProblemMenu.<event_handler>
        wx.GetTopLevelParent().Close()
        print "Event handler `onExit' not implemented"
        event.Skip()

    def onAbout(self, event):  # wxGlade: ProblemMenu.<event_handler>
        print "Event handler `onAbout' not implemented"
        event.Skip()

# end of class ProblemMenu

class ProblemTools(wx.ToolBar):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ProblemTools.__init__
        kwds["style"] = wx.TB_3DBUTTONS | wx.TB_TEXT | wx.TB_NOICONS
        wx.ToolBar.__init__(self, *args, **kwds)
        self.AddLabelTool(wx.ID_ADD, "Add Problem", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.AddSeparator()
        self.AddLabelTool(9000, "Add Note", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.AddLabelTool(9001, "Delete Note", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.AddLabelTool(9002, "Read Codes", wx.NullBitmap, wx.NullBitmap, wx.ITEM_NORMAL, "", "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOOL, self.AddProblem, id=wx.ID_ADD)
        self.Bind(wx.EVT_TOOL, self.AddNote, id=9000)
        self.Bind(wx.EVT_TOOL, self.DeleteNote, id=9001)
        self.Bind(wx.EVT_TOOL, self.ReadCodes, id=9002)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ProblemTools.__set_properties
        self.Realize()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ProblemTools.__do_layout
        pass
        # end wxGlade

    def AddProblem(self, event):  # wxGlade: ProblemTools.<event_handler>
        dlg = ProblemSelector(self.GetParent())
        if dlg.ShowModal()==wx.ID_OK:
            p = Problem()
            p.name = dlg.active_code
            p.severity = Problem.SEVERITY_CHOICES[dlg.severity.GetSelection()][0]
            p.activity = Problem.ACTIVITY_CHOICES[dlg.activity.GetSelection()][0]
            p.expiry = dlg.expiry.GetValue()
            if p.expiry.IsValid():
                p.expiry = p.expiry.FormatISODate()
            else:
                p.expiry = None
            p.parent = None
            p.save()
            self.GetParent().Reload()

    def AddNote(self, event):  # wxGlade: ProblemTools.<event_handler>
        wxforms.gui.FormDialog(Note()).show_and_save()
        self.GetParent().notes.Reload()

    def DeleteNote(self, event):  # wxGlade: ProblemTools.<event_handler>
        notes = self.GetParent().notes.GetSelectedNotes()
        for n in notes:
            n.delete()
        self.GetParent().notes.Reload()

    def ReadCodes(self, event):  # wxGlade: ProblemTools.<event_handler>
        code = ReadCodeBrowser(self,preferred_codes = [('Problem headers',[x.name for x in Problem.objects.all()]),
                                                       ('Read code formulary',[ReadCode.objects.get(pk=x) for x in ['M111.']])]).GetReadCode()


# end of class ProblemTools
def main(*args, **options):
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = ProblemFrame(None, -1, "")
    frame_1.SetMenuBar(ProblemMenu())
    frame_1.SetToolBar(ProblemTools(parent=frame_1))
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()

if __name__ == "__main__":
    main()

